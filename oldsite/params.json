{"name":"Crux","tagline":"Productive Programming for the Web","body":"\r\nCrux is a principled, practical AltJS language that aims to provide an easy, familiar programming environment that\r\ndoes not compromise on rock-solid fundamentals.\r\n\r\n### Big Ideas\r\n\r\nCrux is all about small, clever ideas that fit together without clumsy seams or weird corner cases.  We won't try\r\nto guess what you're trying to say because we don't think your customers should be the ones to tell you that we guessed\r\nwrong.\r\n\r\n* Easy, familiar syntax that doesn't hide surprises\r\n* Hindley-Milner type inference\r\n* Lean, obvious generated code\r\n* Solid asynchronous programming\r\n\r\n### What does it look like?\r\n\r\nCurrent thinking here: [link](https://github.com/andyfriesen/crux/wiki/Syntax-Strawman)\r\n\r\nSummary:\r\n\r\n```\r\ndata List a {\r\n    Cons a (List a),\r\n    Nil\r\n};\r\n\r\nlet s = Cons(5, Cons(6, Cons(7, Nil)));\r\n\r\nfun len(list) {\r\n    match list {\r\n        Nil => 0;\r\n        Cons x tail => 1 + len(tail);\r\n    };\r\n};\r\n\r\nlet _ = print(len(s));\r\n```\r\n\r\n### Status\r\n\r\nWorking:\r\n\r\n* Type inference\r\n* Sums\r\n* Pattern matching\r\n* [Row-polymorphic records](https://github.com/andyfriesen/crux/blob/master/design/objects.md)\r\n* `if-then-else`\r\n* `return`\r\n* Type aliasing\r\n* [Mutability](https://github.com/andyfriesen/crux/blob/master/design/mutability.md)\r\n* `while` loops\r\n\r\nNot done:\r\n\r\n* Modules\r\n* `for` loops\r\n* `break`, `continue`\r\n* Exceptions\r\n* JS FFI\r\n* Asynchrony\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}